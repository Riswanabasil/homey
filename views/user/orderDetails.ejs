<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details | Homey</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        .breadcrumb-container {
            margin-top: 20px;
        }

        .order-details-container {
            margin-top: 20px;
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
        }

        .order-details-header {
            background-color: #fff;
            padding: 10px 20px;
            border-bottom: 1px solid #dee2e6;
            border-radius: 5px 5px 0 0;
        }

        .order-details-body {
            background-color: #fff;
            padding: 20px;
            border-radius: 0 0 5px 5px;
        }

        .order-status {
            font-weight: bold;
            font-size: 1.2rem;
        }

        .order-status.cancelled {
            color: red;
        }

        .order-status.delivered {
            color: green;
        }
    </style>
    
</head>

<body>
  <nav class="custom-navbar navbar navbar-expand-md navbar-dark bg-dark" aria-label="Furni navigation bar">
    <div class="container">
      <a class="navbar-brand" href="/">Homey<span>.</span></a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarsFurni" aria-controls="navbarsFurni" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarsFurni">
        <ul class="custom-navbar-nav navbar-nav ms-auto mb-2 mb-md-0">
          <li class="nav-item">
            <a class="nav-link" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/shop">Shop</a>
          </li>
          <!-- <li class="nav-item">
            <a class="nav-link" href="/profile">Profile</a>
          </li> -->
          <li class="nav-item">
            <a class="nav-link" href="/logout">Logout</a>
          </li>
        </ul>
        <ul class="custom-navbar-cta navbar-nav mb-2 mb-md-0 ms-5">
          <li class="nav-item">
            <li><a class="nav-link" href="/profile"><img src="../../images/user.svg"></a></li>
            <a class="nav-link" href="/cart"><img src="/images/cart.svg"></a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

    <div class="container breadcrumb-container">
        <!-- Breadcrumbs -->
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/orders">Orders</a></li>
                <li class="breadcrumb-item active" aria-current="page">Order Details</li>
            </ol>
        </nav>
    </div>

    <div class="container order-details-container">
        <div class="order-details-header">
            <h3>Order Details</h3>
        </div>
        <div class="order-details-body">
            <p>Order Id: <strong><%= order.orderId %></strong></p>
            <p>Date: <strong><%= order.createdAt.toDateString() %></strong></p>
            <p>Total: <strong>₹<%= order.total %></strong></p>
            <p>Payment Method: <strong><%= order.paymentMethod %></strong></p>

            <h4 class="order-status <%= order.status.toLowerCase() %>">Order Status: <%= order.status %></h4>

            <h4>Order Details</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    <% order.products.forEach(product => { %>
                        <tr>
                            <td><%= product.productId.productName %></td>
                            <td>₹<%= product.price %></td>
                            <td><%= product.quantity %></td>
                            <td>₹<%= product.price * product.quantity %></td>
                            <td>
                                <% if (order.status === 'Order Placed' || order.status === 'Shipped') { %>
                                    <form id="cancelProductForm-<%= product.productId._id  %>" action="/orders/cancel/product/<%= order.orderId %>/<%= product.productId._id  %>" method="POST" style="display:inline;">
                                        <button type="submit" class="btn btn-danger btn-sm" onclick="confirmCancel('<%= product.productId._id  %>')">Cancel Product</button>
                                    </form>
                                <% } else if (order.status === 'Delivered') { %>
                                    <div class="d-flex flex-column"> 
                                        <form id="returnProductForm-<%= product.productId._id %>" action="/orders/return/product/<%= order.orderId %>/<%= product.productId._id %>" method="POST" style="margin-bottom: 10px;">
                                            <button type="submit" class="btn btn-warning btn-sm" onclick="confirmReturn( '<%= product.productId._id %>')">Return Product</button>
                                        </form>
                                        <a href="/orders/invoice/<%= order.orderId %>" class="btn btn-info btn-sm">Invoice Download</a>
                                    </div>
                                <% } %>
                            </td>
                        </tr>
                    <% }); %>
                    <% if (order.paymentStatus === 'Failed') { %>
                        <tr>
                            <td colspan="5" style="text-align:center;"> 
                                <button id="retryPaymentBtn" class="btn btn-danger" onclick="retryPayment('<%= order.orderId %>')">Retry Payment</button>
                            </td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
    <p>Name: <%= user.name %></p>
    <script>
    function confirmCancel(productId) 
    {
        event.preventDefault(); 
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        }).then((result) => {
            if (result.isConfirmed) {
                var form = document.getElementById(`cancelProductForm-${productId}`);

                if (form) {
                    var formData = new FormData(form);

                    fetch(form.action, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error('Server responded with a non-OK status');
                        }
                    })
                    .then(data => {
                        if (data.success) {
                            var cancelButton = form.querySelector(`button[onclick="confirmCancel('${productId}')"]`);
                            if (cancelButton) {
                                cancelButton.style.display = 'none';
                            }
                            Swal.fire('Cancelled!', 'Your product has been cancelled.', 'success');
                        } else {
                            Swal.fire('Failed!', 'Failed to cancel the product.', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire('Error!', 'An error occurred while canceling the product.', 'error');
                    });
                } else {
                    console.error('Form not found:', `cancelProductForm-${productId}`);
                    Swal.fire('Error!', 'Form not found. Please try again.', 'error');
                }
            }
        });
    }


function confirmReturn(productId) {
    event.preventDefault();
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#f39c12',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, return it!'
    }).then((result) => {
        if (result.isConfirmed) {
            // document.getElementById(`returnProductForm-${productId}`).submit();
            var form = document.getElementById(`returnProductForm-${productId}`);
            if (form){
                var formData = new FormData(form);

                    fetch(form.action, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error('Server responded with a non-OK status');
                        }
                    })
                    .then(data => {
                        if (data.success) {
                            var cancelButton = form.querySelector(`button[onclick="confirmReturn('${productId}')"]`);
                            if (cancelButton) {
                                cancelButton.style.display = 'none';
                            }
                            Swal.fire({
  title: 'Returned!',
  text: 'Your product has been returned.',
  icon: 'success',
  confirmButtonText: 'OK'
}).then((result) => {
  if (result.isConfirmed) {
    
    window.location.reload();
  }
})
                        } else {
                            Swal.fire('Failed!', 'Failed to cancel the product.', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire('Error!', 'An error occurred while canceling the product.', 'error');
                    });
            }else {
                    console.error('Form not found:', `cancelProductForm-${productId}`);
                    Swal.fire('Error!', 'Form not found. Please try again.', 'error');
                }
        }


    });
}


        document.addEventListener('DOMContentLoaded', function() {
    const retryPaymentBtn = document.getElementById('retryPaymentBtn');

    if (retryPaymentBtn) {
        retryPaymentBtn.addEventListener('click', function() {
            
            const orderId = '<%= order._id %>';

            
            fetch(`/retry-payment/${orderId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    initiateRazorpayRetry(data.order); 
                } else {
                    alert('Error in retrying payment, please try again.');
                }
            });
        });
    }
});

function initiateRazorpayRetry(order) {
    const amount = order.total; 

    fetch('/create-razorpay-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ amount: amount })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const options = {
                "key": "<%= process.env.RAZORPAY_ID_KEY %>", 
                "amount": data.amount, 
                "order_id": data.id, 
                "name": "Your Company Name",
                "description": "Payment for Order",
                "handler": function(response) {
                 
                    processOrder({
                        paymentMethod: 'Razorpay',
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature,
                        orderId: order._id, 
                        total: amount,
                        paymentStatus: 'Completed'
                    });
                },
                "prefill": {
                    "name": "<%= user.name %>",
                    "email": "<%= user.email %>",
                    "contact": "<%= user.phone %>"
                },
                "theme": {
                    "color": "#3399cc"
                }
            };
            var rzp1 = new Razorpay(options);
            rzp1.open(); 
        } else {
            alert('Failed to initiate payment retry. Please try again.');
        }
    }).catch(error => console.error('Error initiating Razorpay for retry:', error));
}

function processOrder(data) {
    fetch('/place-order-again', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(data)
    }).then(response => response.json())
      .then(data => {
        if (data.success) {
            window.location.href = '/thankyou';
        } else {
            alert('Order processing failed, please try again.');
        }
    }).catch(error => {
        console.error('Error processing order:', error);
        alert('An error occurred, please try again.');
    });
}
    </script>
    
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/js/bootstrap.bundle.min.js"></script>
    <script src="/js/custom.js"></script>
</body>

</html>
